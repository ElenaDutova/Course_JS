"use strict";

/* Lesson 13. JavaScript Operators. Conditional operators */

    { /* Оператор if ... else */

        /* Оператор выполняет операцию (инструкцию), если указанное условие истинно (имеет значение true).
        Если указанное значение ложно (имеет значение false), то может быть выполнена другая операция (инструкция). */

        /* Синтаксис:
        if (условие) {
            код для запуска, если условие верно (true)
        } else {
            код для запуска, если условие НЕверно (false)
        } */

        /* Чтобы лучше понять синтаксис, давайте рассмотрим реальный пример.
        Представьте, что мать или отец попросили помочь с работой по дому своего ребёнка.
        Родитель может сказать: "Если ты поможешь мне с покупками,
        то я дам тебе дополнительные деньги на карманные расходы,
        которые ты сможешь потратить на игрушку, какую захочешь".  
        В JavaScript, мы можем представить это так: */

        let shoppingDone = true,
			childsAllowance = 10;
		

		if (shoppingDone === true) {
            childsAllowance = 15;
        } else {
            childsAllowance = 10;
        }

        console.log(childsAllowance);

        /* Мы задали 2 переменные и поместили в них значения.
        Далее используя оператор сравнения мыпрописали условие:
        если shoppingDone строго истинно,
        то тогда childsAllowance принимает значение 15.
        если shoppingDone строго НЕ истинно,
        то тогда childsAllowance остается со значением 10.
        С помощью console.log мы получили значение 15, т.к. условие вернуло значение true. */

        /* Чаще всего в реальной жизни мы столкнемся с тем, что условий будет много.
        И мы можем их проверять при помощи вложенности, используя else if: */

        let num = 100;

        if (num > 200) {
            console.log("Не может быть!");
        } else if (num < 50) {
            console.log("Опять неверно.");
        } else {
            console.log("В точку!");
        }

        /* Мы задали переменную num со значеним 100.
        Затем прописали условие - если num больше 200,
        то в console.log мы увидим "Не может быть!".
        Но так как наше условие возвращает false (ведь 100 не может быть больше 200),
        тогда мы проверяем еще одно условие - если num меньше 50,
        то в console.log мы увидим "Опять неверно."
        И опять же наше условие вернет нам false (ведь 100 не может быть меньше 50).
        И тогда через console.log мы получим "В точку!", т.к. оба условия оказались ложными. */
    }

    { /* Тернарный оператор ... ? ... : ... */

        /* Тернарный или условный оператор проверяет условие и возвращает одно значение или выражение,
        если условие является true, и другое значение/выражение, если условие является false.
        Часто это очень удобная альтернатива блоку if...else, позволяющая затрачивать меньшие усилия
        на написание кода, когда имеется всего лишь два варианта,
        выбираемых на основе условия true/false. */

        /* Синтаксис:

        (условие) ? код для запуска, если условие true : код для запуска, если условие false */

        /* У нас есть переменная isBirthday , если она true,
        мы отправляем посетителю поздравление с днём рождения; 
        если нет – выдаём стандартное приветствие. */

        let isBithday = false,
            greeting = "";

        (isBithday === true) ? greeting = "Happy bithday, Mr Smith!" : greeting = "Good morning, Mr Smith!";

        console.log(greeting);

    }

    { /* Оператор switch */

        /* Принимает одно единственное значение/выражение, а затем просматривает ряд вариантов,
        пока не найдет вариант, соответствующий этому значению, 
        после чего выполняет код, назначенный этому варианту. */

        /* Конструкция switch всегда идет на строгое сравнение (===), в отличие от других условий. */

        /* Синтаксис:

        swith (выражение/значение) {
            case choice 1(вариант выбора):
                выполнить этот код (если вариант совпал с выражением)
                break;
            case choice 2(вариант выбора):
                выполнить этот код, а не предыдущий (если вариант совпал с выражением)
                break;
            //вариантов может быть любое количество
            default:
                выполнить этот код, если ни один из других вариантов не совпал с выражением
        } */

        let dolphin = 10;

        switch (dolphin) {
            case 9:
                console.log("Не верно");
                break;
            case 11:
                console.log("Опять мимо");
                break;
            case 10:
                console.log("Браво!");
                break;
            default:
                console.log("Not today");
        }

        /* Мы создали переменную dolphin и положили в нее значение 10.
        Вызвали оператор switch. Задали выражение в скобках - нашу переменную.
        Теперь мы будет проверять ее на строгое соответствие вариантам. 
        В первом случае вариант не соответствует выражению, поэтому браузер перейдет к следующему варианту.
        Во втором случае произойдет то же самое.
        И только дойдя до 3го case, вариант совпадет с выражением и выполнит код, коорый назначен этому варианту.
        В данном случае мы получим в console.log значение "Браво!". */
        
        /* Оператор break нам нужен для того, чтобы когда код дойдет до варианта, 
        который совпадет с выражением, он остановился и не "просматривал" следующие варианты. */

        /* Default используется для создания варианта выбора по умолчанию, 
        выбираемого, если ни один из других вариантов не совпал с выражением */
        
    }